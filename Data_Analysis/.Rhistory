# Add data.tree
require("data.tree")
install.packages("data.tree")
install.packages("data.tree")
# Add data.tree
require("data.tree")
# Based on Input node, recursively generate Newick Tree
recursiveNewickWrite <- function(node)
{
# If Node has no children, just return its name and distance value
if(length(node$children)==0) {
dist<-distance()
return (sprintf("%s:%.1f", node$name, dist))
}else{
# Set current node as "internal", Get Children of Node and apply fn recursiveNewickWrite
dist<-distance()
# Result Format example : (  result from child nodes, separated by commas ) CurrentNode$name:1.0
return (sprintf("(%s)%s:%.1f", paste(vapply(node$children, recursiveNewickWrite, FUN.VALUE = character(1)), collapse=", "), node$name, dist))
}
}
# Generate Newick Format WITHOUT internal nodes
recursiveNewickWrite2 <- function(node)
{
# If Node has no children, just return its name and distance value
if(length(node$children)==0) {
dist<-distance()
return (sprintf("%s:%.1f", node$name, dist))
}else{
# Set current node as "internal", Get Children of Node and apply fn recursiveNewickWrite
dist<-distance()
# Result Format example : (  result from child nodes, separated by commas ) CurrentNode$name:1.0
return (sprintf("(%s)", paste(vapply(node$children, recursiveNewickWrite2, FUN.VALUE = character(1)), collapse=", ")))
}
}
#Distance Function for Tree, tbd
distance<-function()
{
return (1.0)
}
# Set current directory to R folder
setwd("G:/Dan_Lab/Food_Tree/R")
source("lib/newick.tree.r")
source("lib/check.db.r")
source("lib/format.foods.r")
source("lib/make.food.tree.r")
source("lib/make.food.otu.r")
source("lib/filter.db.by.diet.records.r")
setwd("G:/Dan_Lab/Food_Tree/R")
source("lib/newick.tree.r")
source("lib/check.db.r")
source("lib/format.foods.r")
source("lib/make.food.tree.r")
source("lib/make.food.otu.r")
source("lib/filter.db.by.diet.records.r")
#orig_food_records_fn <- "../raw data/original_impdietrecords.txt" # original diet records with special characters removed
orig_food_records_fn <- "../raw data/meals.txt" # original diet records with special characters removed - this is generated in /metadataformatting with mapping file generation
orig_database_fn <- "../raw data/original_SuperTrackerDatabase.txt" # original supertracker database
orig_new_foods_fn <-  "../raw data/original_imp.missing.foods.txt" # hand-curated foods that were missing now assigned with food IDs
old_food_records_fn <- "data/IMP/dietrecords.with.NAs.txt" # first run through, contains NAs
food_records_fn <- "data/IMP/dietrecords.txt" # already formatted, NAs corrected by add.missing.foods.to.diets
new_foods_fn <- "data/IMP/new.foods.tree.building.txt" # new foods used to construct tree only, duplicates caused by portions removed (written by add.missing.foods.to.diets)
food_database_fn <- "data/IMP/SuperTrackerDatabase.txt" # formatted
food_taxonomy_fn <- "output/supertracker.taxonomy.txt" # outputted by make.food.tree
food_reported_database_fn <- "data/IMP/SuperTrackerDatabase.foodsreportedonly.txt" # database containing only the foods eaten in this specific dataset
food_reported_taxonomy_fn <- "output/supertracker.taxonomy.foodsreportedonly.txt" # outputted by make.food.tree
# make sure all food files are properly formatted with FoodIDs
format.foods(orig_database_fn, food_database_fn)
# make sure all food files are properly formatted with FoodIDs
format.foods(orig_database_fn, food_database_fn)
#orig_food_records_fn <- "../raw data/original_impdietrecords.txt" # original diet records with special characters removed
orig_food_records_fn <- "../raw_data/meals.txt" # original diet records with special characters removed - this is generated in /metadataformatting with mapping file generation
orig_database_fn <- "../raw_data/original_SuperTrackerDatabase.txt" # original supertracker database
orig_new_foods_fn <-  "../raw_data/original_imp.missing.foods.txt" # hand-curated foods that were missing now assigned with food IDs
# make sure all food files are properly formatted with FoodIDs
format.foods(orig_database_fn, food_database_fn)
#orig_food_records_fn <- "../raw data/original_impdietrecords.txt" # original diet records with special characters removed
orig_food_records_fn <- "../raw_data/meals.txt" # original diet records with special characters removed - this is generated in /metadataformatting with mapping file generation
orig_database_fn <- "../raw_data/original_SuperTrackerDatabase.txt" # original supertracker database
orig_new_foods_fn <-  "../raw_data/original_imp.missing.foods.txt" # hand-curated foods that were missing now assigned with food IDs
old_food_records_fn <- "data/IMP/dietrecords.with.NAs.txt" # first run through, contains NAs
food_records_fn <- "data/IMP/dietrecords.txt" # already formatted, NAs corrected by add.missing.foods.to.diets
new_foods_fn <- "data/IMP/new.foods.tree.building.txt" # new foods used to construct tree only, duplicates caused by portions removed (written by add.missing.foods.to.diets)
food_database_fn <- "data/IMP/SuperTrackerDatabase.txt" # formatted
food_taxonomy_fn <- "output/supertracker.taxonomy.txt" # outputted by make.food.tree
food_reported_database_fn <- "data/IMP/SuperTrackerDatabase.foodsreportedonly.txt" # database containing only the foods eaten in this specific dataset
food_reported_taxonomy_fn <- "output/supertracker.taxonomy.foodsreportedonly.txt" # outputted by make.food.tree
food_database_fn <- "data/IMP/SuperTrackerDatabase.foodsreportedonly.txt" # formatted
# make sure all food files are properly formatted with FoodIDs
format.foods(orig_database_fn, food_database_fn)
setwd('G:/Dan_Lab/codes/CAZyme/CAZYme_Analysis/Data_Analysis/')
require(robCompositions)
require(tibble)
require(dplyr)
require(vegan)
cazyme <- read.table('./data/Cazyme_total_try.txt',sep='\t',header = T,row.names = 1)
map <- read.table("./maps/SampleID_map.txt", sep = "\t", header = T, comment = "")
cazyme <- as.data.frame(t(sweep(cazyme,2,colSums(cazyme),'/')))
cazyme_filter <- as.data.frame(cazyme)
cazyme_filter <- rownames_to_column(cazyme_filter,var = 'X.SampleID')
cazyme_filter <- merge(cazyme_filter,map[c('X.SampleID','UserName','StudyDayNo')],by = 'X.SampleID')
cazyme_mean <- aggregate(cazyme,by=list(cazyme_filter$UserName),FUN=mean)
rownames(cazyme_mean) <- cazyme_mean$Group.1;cazyme_mean <- cazyme_mean[-1]
cazyme_mean_for_fil <- cazyme_mean
cazyme_mean_for_fil[cazyme_mean_for_fil>0] <- 1
cazyme_mean <- cazyme_mean[colSums(cazyme_mean_for_fil)>34*0.3]
cazymes_to_keep <- colnames(cazyme_mean)
setwd("G:/Dan_Lab/dietstudy_analyses-master/")
map_sample <- read.table("data/maps/SampleID_map.txt", sep = "\t", header = T, comment = "")
require(rmarkdown)
require(knitr)
require(tidyverse)
require(RColorBrewer)
require(cowplot)
require(reshape2)
require(ggdendro)
require(vegan)
require(ape)
setwd("G:/Dan_Lab/dietstudy_analyses-master/")
map_sample <- read.table("data/maps/SampleID_map.txt", sep = "\t", header = T, comment = "")
map_username <- read.table("data/maps/UserName_map.txt", sep = "\t", header = T, comment = "")
map_sample$StudyDate <- as.Date.factor(map_sample$StudyDate, format = "%m/%d/%y")
# identify soylent samples
soylent <- map_sample[map_sample$UserName %in% c("MCTs11", "MCTs12"),]
soylent <- as.character(soylent$X.SampleID)
##########food##############
# load the food distance matrix, unweighted unifrac
food_un <- read.delim("data/diet/processed_food/dhydrt_smry_no_soy_beta/unweighted_unifrac_dhydrt.smry.no.soy.txt", row = 1) # weighted in not significant
food_dist <- as.dist(food_un)
# make non-tree distance matrix for food (for supplemental)
food <- read.delim("data/diet/processed_food/dhydrt.smry.no.soy.txt", row = 1)
food <- food[,colnames(food) %in% colnames(food_un)]
no_tree_dist <- dist(t(food))
###############nutrients############
# load nutrition data
nutr <- read.delim("data/diet/processed_nutr/nutr_65_smry_no_soy.txt", row = 1)
# normalize nutrition data across features (rows)
nutr_n <- sweep(nutr, 1, rowSums(nutr), "/")
# make nutrition distance matrix (euclidean)
nutr_dist <- dist(t(nutr_n))
setwd('G:/Dan_Lab/codes/CAZyme/CAZYme_Analysis/Data_Analysis/')
cazyme_pro <- as.data.frame(t(cazyme_mean_clr))
cazyme_mean_for_fil <- cazyme_mean
cazyme_mean_for_fil[cazyme_mean_for_fil>0] <- 1
cazyme_mean <- cazyme_mean[colSums(cazyme_mean_for_fil)>34*0.3]
myimpR = impRZilr(cazyme_mean, maxit = 3, method = "lm", dl = rep(0.00000000001,ncol(cazyme_mean)), verbose = T) # pick a good detection limit...
cazyme_mean_clr <- cenLR(myimpR$x)$x
rownames(cazyme_mean_clr) <- rownames(cazyme_mean)
save(cazyme_mean_clr, file = "data/cazyme_mean_clr_try.RData")
cazyme_pro <- as.data.frame(t(cazyme_mean_clr))
cazyme_pro <- cazyme_pro[,colnames(cazyme_pro)%in%colnames(food_un)]
cazyme_dist <- dist(t(cazyme_pro))
# make pcoas
pcoa_f <- as.data.frame(pcoa(food_dist)$vectors)
pcoa_c <- as.data.frame(pcoa(cazyme_dist)$vectors)
# procrustes
pro <- procrustes(pcoa_f, pcoa_c)
pro_test <- protest(pcoa_f, pcoa_c, perm = 999)
mantel_test <- mantel(food_dist,cazyme_dist,method = 'spearman')
eigen <- sqrt(pro$svd$d)
percent_var <- signif(eigen/sum(eigen), 4)*100
beta_pro <- data.frame(pro$X)
trans_pro <- data.frame(pro$Yrot)
beta_pro$UserName <- rownames(beta_pro)
beta_pro$type <- "Food (Unweighted Unifrac)"
trans_pro$UserName <- rownames(trans_pro)
trans_pro$type <- "Cazyme (Aitchison's)"
colnames(trans_pro) <- colnames(beta_pro)
pval <- signif(pro_test$signif, 1)
plot <- rbind(beta_pro, trans_pro)
food_cazyme <- ggplot(plot) +
geom_point(size = 3, alpha=0.75, aes(x = Axis.1, y = Axis.2, color = type)) +
scale_color_manual(values = c("#ff0f17", "#ffb405")) +
theme_classic() +
geom_line(aes(x= Axis.1, y=Axis.2, group=UserName), col = "darkgrey", alpha = 0.6) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size=9),
legend.position = 'bottom',
axis.text = element_text(size=4),
axis.title = element_text(size=9),
aspect.ratio = 1) +
guides(color = guide_legend(ncol = 1)) +
annotate("text", x = 0.3, y = -0.27, label = paste0("p-value=",pval), size = 2) +
xlab(paste0("PC 1 [",percent_var[1],"%]")) +
ylab(paste0("PC 2 [",percent_var[2],"%]"))
food_cazyme_leg <- get_legend(food_cazyme)
food_cazyme + theme(legend.position = "none")
cazyme_mean <- cazyme_mean[colSums(cazyme_mean_for_fil)>34*0.5]
myimpR = impRZilr(cazyme_mean, maxit = 3, method = "lm", dl = rep(0.00000000001,ncol(cazyme_mean)), verbose = T) # pick a good detection limit...
cazyme_mean_clr <- cenLR(myimpR$x)$x
rownames(cazyme_mean_clr) <- rownames(cazyme_mean)
save(cazyme_mean_clr, file = "data/cazyme_mean_clr_try.RData")
cazymes_to_keep <- colnames(cazyme_mean)
cazyme_pro <- as.data.frame(t(cazyme_mean_clr))
cazyme_pro <- cazyme_pro[,colnames(cazyme_pro)%in%colnames(food_un)]
cazyme_dist <- dist(t(cazyme_pro))
pcoa_c <- as.data.frame(pcoa(cazyme_dist)$vectors)
# procrustes
pro <- procrustes(pcoa_f, pcoa_c)
pro_test <- protest(pcoa_f, pcoa_c, perm = 999)
mantel_test <- mantel(food_dist,cazyme_dist,method = 'spearman')
eigen <- sqrt(pro$svd$d)
percent_var <- signif(eigen/sum(eigen), 4)*100
beta_pro <- data.frame(pro$X)
trans_pro <- data.frame(pro$Yrot)
beta_pro$UserName <- rownames(beta_pro)
beta_pro$type <- "Food (Unweighted Unifrac)"
trans_pro$UserName <- rownames(trans_pro)
trans_pro$type <- "Cazyme (Aitchison's)"
colnames(trans_pro) <- colnames(beta_pro)
pval <- signif(pro_test$signif, 1)
plot <- rbind(beta_pro, trans_pro)
food_cazyme <- ggplot(plot) +
geom_point(size = 3, alpha=0.75, aes(x = Axis.1, y = Axis.2, color = type)) +
scale_color_manual(values = c("#ff0f17", "#ffb405")) +
theme_classic() +
geom_line(aes(x= Axis.1, y=Axis.2, group=UserName), col = "darkgrey", alpha = 0.6) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size=9),
legend.position = 'bottom',
axis.text = element_text(size=4),
axis.title = element_text(size=9),
aspect.ratio = 1) +
guides(color = guide_legend(ncol = 1)) +
annotate("text", x = 0.3, y = -0.27, label = paste0("p-value=",pval), size = 2) +
xlab(paste0("PC 1 [",percent_var[1],"%]")) +
ylab(paste0("PC 2 [",percent_var[2],"%]"))
food_cazyme_leg <- get_legend(food_cazyme)
food_cazyme + theme(legend.position = "none")
cazyme_mean <- cazyme_mean[colSums(cazyme_mean_for_fil)>34*0.25]
cazyme_mean_for_fil <- cazyme_mean
cazyme_mean_for_fil[cazyme_mean_for_fil>0] <- 1
cazyme_mean <- cazyme_mean[colSums(cazyme_mean_for_fil)>34*0.25]
cazyme_mean <- aggregate(cazyme,by=list(cazyme_filter$UserName),FUN=mean)
rownames(cazyme_mean) <- cazyme_mean$Group.1;cazyme_mean <- cazyme_mean[-1]
cazyme_mean_for_fil <- cazyme_mean
cazyme_mean_for_fil[cazyme_mean_for_fil>0] <- 1
cazyme_mean <- cazyme_mean[colSums(cazyme_mean_for_fil)>34*0.25]
myimpR = impRZilr(cazyme_mean, maxit = 3, method = "lm", dl = rep(0.00000000001,ncol(cazyme_mean)), verbose = T) # pick a good detection limit...
View(cazyme_mean)
View(myimpR)
cazyme_mean_clr <- cenLR(myimpR$x)$x
rownames(cazyme_mean_clr) <- rownames(cazyme_mean)
cazymes_to_keep <- colnames(cazyme_mean)
cazyme_all <- t(cazyme_cleaned)
cazyme_pro <- as.data.frame(t(cazyme_mean_clr))
cazyme_pro <- cazyme_pro[,colnames(cazyme_pro)%in%colnames(food_un)]
cazyme_dist <- dist(t(cazyme_pro))
# make pcoas
pcoa_f <- as.data.frame(pcoa(food_dist)$vectors)
pcoa_c <- as.data.frame(pcoa(cazyme_dist)$vectors)
# procrustes
pro <- procrustes(pcoa_f, pcoa_c)
pro_test <- protest(pcoa_f, pcoa_c, perm = 999)
mantel_test <- mantel(food_dist,cazyme_dist,method = 'spearman')
eigen <- sqrt(pro$svd$d)
percent_var <- signif(eigen/sum(eigen), 4)*100
beta_pro <- data.frame(pro$X)
trans_pro <- data.frame(pro$Yrot)
beta_pro$UserName <- rownames(beta_pro)
beta_pro$type <- "Food (Unweighted Unifrac)"
trans_pro$UserName <- rownames(trans_pro)
trans_pro$type <- "Cazyme (Aitchison's)"
colnames(trans_pro) <- colnames(beta_pro)
pval <- signif(pro_test$signif, 1)
plot <- rbind(beta_pro, trans_pro)
food_cazyme <- ggplot(plot) +
geom_point(size = 3, alpha=0.75, aes(x = Axis.1, y = Axis.2, color = type)) +
scale_color_manual(values = c("#ff0f17", "#ffb405")) +
theme_classic() +
geom_line(aes(x= Axis.1, y=Axis.2, group=UserName), col = "darkgrey", alpha = 0.6) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size=9),
legend.position = 'bottom',
axis.text = element_text(size=4),
axis.title = element_text(size=9),
aspect.ratio = 1) +
guides(color = guide_legend(ncol = 1)) +
annotate("text", x = 0.3, y = -0.27, label = paste0("p-value=",pval), size = 2) +
xlab(paste0("PC 1 [",percent_var[1],"%]")) +
ylab(paste0("PC 2 [",percent_var[2],"%]"))
food_cazyme_leg <- get_legend(food_cazyme)
food_cazyme + theme(legend.position = "none")
ggsave('./result/pro_test_try.pdf')
# procrustes
pro <- procrustes(pcoa_n, pcoa_c)
pro_test <- protest(pcoa_n, pcoa_c, perm = 999)
# make pcoas
pcoa_n <- as.data.frame(pcoa(nutr_dist)$vectors)
pcoa_c <- as.data.frame(pcoa(cazyme_dist)$vectors)
# procrustes
pro <- procrustes(pcoa_n, pcoa_c)
pro_test <- protest(pcoa_n, pcoa_c, perm = 999)
mantel_test <- mantel(nutr_dist,cazyme_dist,method = 'spearman')
eigen <- sqrt(pro$svd$d)
percent_var <- signif(eigen/sum(eigen), 4)*100
beta_pro <- data.frame(pro$X)
trans_pro <- data.frame(pro$Yrot)
beta_pro$UserName <- rownames(beta_pro)
beta_pro$type <- "Nutrition (Euclidean)"
trans_pro$UserName <- rownames(trans_pro)
trans_pro$type <- "Cazyme (Aitchison's)"
colnames(trans_pro) <- colnames(beta_pro)
pval <- signif(pro_test$signif, 1)
plot <- rbind(beta_pro, trans_pro)
nutr_cazyme <- ggplot(plot) +
geom_point(size = 3, alpha=0.75, aes(x = Axis.1, y = Axis.2, color = type)) +
scale_color_manual(values = c("#1a661a", "#00becc")) +
theme_classic() +
geom_line(aes(x= Axis.1, y=Axis.2, group=UserName), col = "darkgrey", alpha = 0.6) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size=9),
legend.position = 'bottom',
axis.text = element_text(size=4),
axis.title = element_text(size=9),
aspect.ratio = 1) +
guides(color = guide_legend(ncol = 1)) +
annotate("text", x = 0.2, y = -0.2, label = paste0("p-value=",pval), size = 2) +
xlab(paste0("PC 1 [",percent_var[1],"%]")) +
ylab(paste0("PC 2 [",percent_var[2],"%]"))
nutr_cazyme_leg <- get_legend(nutr_cazyme)
nutr_cazyme + theme(legend.position = "none")
cazyme_mean <- aggregate(cazyme,by=list(cazyme_filter$UserName),FUN=mean)
rownames(cazyme_mean) <- cazyme_mean$Group.1;cazyme_mean <- cazyme_mean[-1]
cazyme_mean_for_fil <- cazyme_mean
cazyme_mean_for_fil[cazyme_mean_for_fil>0] <- 1
cazyme_mean <- cazyme_mean[colSums(cazyme_mean_for_fil)>34*0.3]
myimpR = impRZilr(cazyme_mean, maxit = 3, method = "lm", dl = rep(0.00000000001,ncol(cazyme_mean)), verbose = T) # pick a good detection limit...
cazyme_mean_clr <- cenLR(myimpR$x)$x
rownames(cazyme_mean_clr) <- rownames(cazyme_mean)
cazymes_to_keep <- colnames(cazyme_mean)
cazyme_pro <- as.data.frame(t(cazyme_mean_clr))
cazyme_pro <- cazyme_pro[,colnames(cazyme_pro)%in%colnames(food_un)]
cazyme_dist <- dist(t(cazyme_pro))
# make pcoas
pcoa_f <- as.data.frame(pcoa(food_dist)$vectors)
pcoa_c <- as.data.frame(pcoa(cazyme_dist)$vectors)
# procrustes
pro <- procrustes(pcoa_f, pcoa_c)
pro_test <- protest(pcoa_f, pcoa_c, perm = 999)
mantel_test <- mantel(food_dist,cazyme_dist,method = 'spearman')
eigen <- sqrt(pro$svd$d)
percent_var <- signif(eigen/sum(eigen), 4)*100
beta_pro <- data.frame(pro$X)
trans_pro <- data.frame(pro$Yrot)
beta_pro$UserName <- rownames(beta_pro)
beta_pro$type <- "Food (Unweighted Unifrac)"
trans_pro$UserName <- rownames(trans_pro)
trans_pro$type <- "Cazyme (Aitchison's)"
colnames(trans_pro) <- colnames(beta_pro)
pval <- signif(pro_test$signif, 1)
plot <- rbind(beta_pro, trans_pro)
food_cazyme <- ggplot(plot) +
geom_point(size = 3, alpha=0.75, aes(x = Axis.1, y = Axis.2, color = type)) +
scale_color_manual(values = c("#ff0f17", "#ffb405")) +
theme_classic() +
geom_line(aes(x= Axis.1, y=Axis.2, group=UserName), col = "darkgrey", alpha = 0.6) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size=9),
legend.position = 'bottom',
axis.text = element_text(size=4),
axis.title = element_text(size=9),
aspect.ratio = 1) +
guides(color = guide_legend(ncol = 1)) +
annotate("text", x = 0.3, y = -0.27, label = paste0("p-value=",pval), size = 2) +
xlab(paste0("PC 1 [",percent_var[1],"%]")) +
ylab(paste0("PC 2 [",percent_var[2],"%]"))
food_cazyme_leg <- get_legend(food_cazyme)
food_cazyme + theme(legend.position = "none")
# make pcoas
pcoa_n <- as.data.frame(pcoa(nutr_dist)$vectors)
pcoa_c <- as.data.frame(pcoa(cazyme_dist)$vectors)
# procrustes
pro <- procrustes(pcoa_n, pcoa_c)
pro_test <- protest(pcoa_n, pcoa_c, perm = 999)
mantel_test <- mantel(nutr_dist,cazyme_dist,method = 'spearman')
eigen <- sqrt(pro$svd$d)
percent_var <- signif(eigen/sum(eigen), 4)*100
beta_pro <- data.frame(pro$X)
trans_pro <- data.frame(pro$Yrot)
beta_pro$UserName <- rownames(beta_pro)
beta_pro$type <- "Nutrition (Euclidean)"
trans_pro$UserName <- rownames(trans_pro)
trans_pro$type <- "Cazyme (Aitchison's)"
colnames(trans_pro) <- colnames(beta_pro)
pval <- signif(pro_test$signif, 1)
plot <- rbind(beta_pro, trans_pro)
nutr_cazyme <- ggplot(plot) +
geom_point(size = 3, alpha=0.75, aes(x = Axis.1, y = Axis.2, color = type)) +
scale_color_manual(values = c("#1a661a", "#00becc")) +
theme_classic() +
geom_line(aes(x= Axis.1, y=Axis.2, group=UserName), col = "darkgrey", alpha = 0.6) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size=9),
legend.position = 'bottom',
axis.text = element_text(size=4),
axis.title = element_text(size=9),
aspect.ratio = 1) +
guides(color = guide_legend(ncol = 1)) +
annotate("text", x = 0.2, y = -0.2, label = paste0("p-value=",pval), size = 2) +
xlab(paste0("PC 1 [",percent_var[1],"%]")) +
ylab(paste0("PC 2 [",percent_var[2],"%]"))
nutr_cazyme_leg <- get_legend(nutr_cazyme)
nutr_cazyme + theme(legend.position = "none")
ggsave('./result/pro_test_nutr_try.pdf')
